/*
 * Copyright (c) 2013-2014, Kevin LÃ¤ufer
 * Copyright (c) 2014-2017, Niklas Hauser
 * Copyright (c) 2016, Fabian Greif
 *
 * This file is part of the modm project.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */
// ----------------------------------------------------------------------------

#ifndef MODM_STM32_DAC{{ id }}_HPP
#	error 	"Don't include this file directly, use 'dac_{{ id }}.hpp' instead!"
#endif

#include <modm/platform/clock/rcc.hpp>
#include <modm/math/algorithm/prescaler.hpp>

template< class SystemClock, modm::frequency_t frequency, modm::percent_t tolerance >
void
modm::platform::Dac{{ id }}::initialize()
{
	constexpr auto result = modm::Prescaler::from_list(SystemClock::Dac, frequency, {2,4,6,8});
	static_assert(result.frequency <= {{ max_frequency }}, "Generated DAC frequency is above maximum frequency!");
	assertBaudrateInTolerance<result.frequency, frequency, tolerance >();

	Rcc::enable<Peripheral::Dac{{id}}>();
	setPrescaler(Prescaler{result.index});
}

void
modm::platform::Dac{{ id }}::setPrescaler(const Prescaler prescaler)
{
%% if target["family"] in ["f2", "f4", "f7", "l1"]
	DAC->CCR = (DAC->CCR & ~DAC_CCR_DACPRE) | (uint32_t(prescaler) << DAC_CCR_DACPRE_Pos);
%% elif target["family"] in ["f1", "f3"]
	RCC->CFGR = (RCC->CFGR & ~(0b11 << 14)) | (uint32_t(prescaler) << 14);
%% endif
}

void
modm::platform::Dac{{ id }}::setLeftAdjust(const Channel channel,uint16_t data)
{
	%% for channel in channels
	Channel{{ channel }} = {{ channel }},
	if(channel == {{ channel }})
	{
		DAC_DHR12L1 = data;
	}
	%% endfor
}

void
modm::platform::Dac{{ id }}::setRightAdjust8(const Channel channel,uint16_t data)
{
	%% for channel in channels
	Channel{{ channel }} = {{ channel }},
	if(channel == {{ channel }})
	{
		DAC_DHR8R1 = data;
	}
	%% endfor
}

void
modm::platform::Dac{{ id }}::setRightAdjust12(const Channel channel,uint16_t data)
{
	%% for channel in channels
	Channel{{ channel }} = {{ channel }},
	if(channel == {{ channel }})
	{
		DAC_DHR12R1 = data;
	}
	%% endfor
}

bool
modm::platform::Dac{{ id }}::setChannel(const Channel channel)
{

	DAC{{ per }}->CR |= DAC_CR_EN;			// switch on DAC

	if (uint32_t(channel) > 18) return false;
	// clear number of conversions in the sequence
	// and set number of conversions to 1

	%% for channel in channels
		Channel{{ channel }} = {{ channel }},
		if(channel == {{ channel }})
		{
			DAC_CR |= DAC_CR_EN{{channel}};
		}
	%% endfor
	%#
	if(channel == 2)
	{
		DAC_CR |= (DAC_CR_EN1 | DAC_CR_EN2);
	}
	return true;
}

void
modm::platform::Dac{{ id }}::disable()
{
}

uint16_t
modm::platform::Dac{{ id }}::setWaveformCharacteristics(uint32_t value)
{
	return DAC_CR |= value;
}



// ----------------------------------------------------------------------------
void
modm::platform::Dac{{ id }}::enableInterruptVector(const uint32_t priority,
												   const bool enable)
{
%% if target["family"] in ["f2", "f4", "f7"]
	const IRQn_Type InterruptVector = DAC_IRQn;
%% elif  target["family"] in ["l1"]
	const IRQn_Type InterruptVector = DAC1_IRQn;
%% elif target["family"] in ["f1", "f3"]
	%% if id < 3
	const IRQn_Type InterruptVector = DAC1_2_IRQn;
	%% elif id == 3
	const IRQn_Type InterruptVector = DAC3_IRQn;
	%% endif
%% endif

	if (enable) {
		NVIC_SetPriority(InterruptVector, priority);
		NVIC_EnableIRQ(InterruptVector);
	} else {
		NVIC_DisableIRQ(InterruptVector);
	}
}

void
modm::platform::Dac{{ id }}::enableInterrupt(const Interrupt_t interrupt)
{
	DAC{{ per }}->CR1 |= interrupt.value;
}

void
modm::platform::Dac{{ id }}::disableInterrupt(const Interrupt_t interrupt)
{
	DAC{{ per }}->CR1 &= ~interrupt.value;
}

modm::platform::Dac{{ id }}::InterruptFlag_t
modm::platform::Dac{{ id }}::getInterruptFlags()
{
	return InterruptFlag_t(DAC{{ per }}->SR);
}

void
modm::platform::Dac{{ id }}::acknowledgeInterruptFlags(const InterruptFlag_t flags)
{
	// Flags are cleared by writing a one to the flag position.
	// Writing a zero is ignored.
	DAC{{ per }}->SR = flags.value;
}
